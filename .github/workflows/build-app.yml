name: Build job

on:
  # Every Friday at 10:00 UTC
  schedule:
    - cron: '0 10 * * 5'
    
  # Manual triggers
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      dry-run:
        description: Creates a draft release
        required: false
      first-run:
        description: First release
        required: false

env:
  REPO_NAME: recloudstream/cloudstream
  RUN_BUILD: 'true'
  APK_NAME: CloudstreamXXX.apk
  REPO_BRANCH: master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Clone Repository (Latest)
        uses: actions/checkout@v3
        with:
          repository: '${{ env.REPO_NAME }}'
          fetch-depth: 0
          ref: '${{ env.REPO_BRANCH }}'
        if: github.event.inputs.git-ref == ''

      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v3
        if: github.event.inputs.git-ref != ''
        with:
          repository: '${{ env.REPO_NAME }}'
          fetch-depth: 0
          ref: ${{ github.event.inputs.git-ref }}
          
      - name: Clone Repository (This)
        uses: actions/checkout@v3
        with:
          path: './res'

      - name: Run script to change package name
        run: |
          cp ./res/changename.py .

      - name: Get previous release
        if: github.event.inputs.first-run == ''
        id: last_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          exclude_types: "draft|prerelease"
          view_top: 1
      
      - name: Get commit count for first release
        if: github.event.inputs.first-run == 'true'
        run:  |
          set -e
          commit_count=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=$commit_count" >> $GITHUB_ENV
          echo "CURRENT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
          echo "COMMIT_COUNT_DIFF=0" >> $GITHUB_ENV
          
      - name: Get current commit count, and count from previous commit
        if: github.event.inputs.first-run == ''
        run:  |
          set -e
          commit_count=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=$commit_count" >> $GITHUB_ENV
          echo "CURRENT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
          prev_commit_count=$(echo "${{ steps.last_release.outputs.tag_name }}" | sed -e "s/^r//")
          
          echo "COMMIT_COUNT_DIFF=$(($commit_count - $prev_commit_count))" >> $GITHUB_ENV
        
      - name: Exit if there are no new commits since last release
        if: env.COMMIT_COUNT_DIFF < 1 && github.event.inputs.first-run == ''
        run: |
          set -e
          
          echo "RUN_BUILD='false'" >> $GITHUB_ENV
          exit 0
        
      - name: Get previous commit count, and set up commit logs
        if: env.RUN_BUILD == 'true'
        run:  |
          set -e
          
          current_sha=${{ env.CURRENT_SHA }}
          commit_count_diff=${{ env.COMMIT_COUNT_DIFF }}
          
          prev_release_sha=$(git rev-parse --short $current_sha~$commit_count_diff)
          echo "PREV_RELEASE_SHA=$prev_release_sha" >> $GITHUB_ENV
          
          echo "COMMIT_LOGS<<{delimiter}
          $(curl -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ env.REPO_NAME }}/compare/$prev_release_sha...$current_sha" \
            | jq '[.commits[]|{message:(.commit.message | split("\n")), username:.author.login}]' \
            | jq -r '.[]|"- \(.message | first) (@\(.username))"')
          {delimiter}" >> $GITHUB_ENV
          
          echo "APK_NAME=CloudstreamXXX-r${{ env.COMMIT_COUNT }}.apk" >> $GITHUB_ENV
        
      - name: Update package name
        if: env.RUN_BUILD == 'true'
        run: |
          python3 ./changename.py

      - name: Grant execute permission for gradlew
        if: env.RUN_BUILD == 'true'
        run: chmod +x gradlew

      - name: Set checks for prerelease updates to true by default
        if: env.RUN_BUILD == 'true'
        run: |
          sed -i "s/R\.string\.prerelease_update_key), false))/R\.string\.prerelease_update_key), true))/" app/src/main/java/com/lagradost/cloudstream3/utils/InAppUpdater.kt
      
      - name: Update prerelease_commit_hash
        if: env.RUN_BUILD == 'true'
        run: |
          COMMIT_HASH="$(git log -1 --format='%H')"
          sed -i "s/<string name=\"prerelease_commit_hash\" translatable=\"false\">unknown_prerelease<\/string>/<string name=\"prerelease_commit_hash\">$COMMIT_HASH<\/string>/g" app/src/main/res/values/strings.xml
      
      - name: Decode Keystore
        if: env.RUN_BUILD == 'true'
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE }}
        run: |
          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
          mkdir -p "${TMP_KEYSTORE_FILE_PATH}"
          echo $ENCODED_STRING | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/prerelease_keystore.keystore
          
      - name: Run Gradle
        if: env.RUN_BUILD == 'true'
        run: |
          ./gradlew assemblePrerelease build androidSourcesJar
          ./gradlew makeJar # for classes.jar, has to be done after assemblePrerelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          
      - name: Clean up build artifacts
        if: env.RUN_BUILD == 'true'
        run: |
          set -e
          
          allapk=($(find app/build/outputs/apk/ -type f -name "*.apk"))
          mylist=($(find app/build/outputs/apk/prerelease/release/ -type f -name "*.apk"))
          cp ${mylist[0]} ${{ env.APK_NAME }}
          printf '%s\n' "${allapk[@]}"
          
      - name: Create first release
        if: github.event.inputs.first-run == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: r${{ env.COMMIT_COUNT }}
          name: Cloudstream r${{ env.COMMIT_COUNT }}
          body: |
            # First pre-release
            
            https://github.com/${{ env.REPO_NAME }}/tree/${{ env.CURRENT_SHA }}
            
          files: |
            Cloudstream3-r${{ env.COMMIT_COUNT }}.apk
          draft: ${{ github.event.inputs.dry-run != '' }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create release
        if: env.RUN_BUILD == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: r${{ env.COMMIT_COUNT }}
          name: Cloudstream r${{ env.COMMIT_COUNT }}
          body: |
            # Pre-release
            
            https://github.com/${{ env.REPO_NAME }}/compare/${{ env.PREV_RELEASE_SHA }}...${{ env.CURRENT_SHA }}
            
            ${{ env.COMMIT_LOGS }}
            
          files: |
            ${{ env.APK_NAME }}
            app/build/libs/app-sources.jar
            app/build/classes.jar
            
          draft: ${{ github.event.inputs.dry-run != '' }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prune old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          keep_latest: 5
          delete_tags: true
